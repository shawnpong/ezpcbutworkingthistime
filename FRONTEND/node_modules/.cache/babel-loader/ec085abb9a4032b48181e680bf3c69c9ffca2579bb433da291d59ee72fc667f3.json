{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/pongster/Documents/ezpcbutworkingthistime/FRONTEND/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toIdentifier;\nvar _isValidIdentifier = require(\"../validators/isValidIdentifier\");\nvar _helperValidatorIdentifier = require(\"@babel/helper-validator-identifier\");\nfunction toIdentifier(input) {\n  input = input + \"\";\n  var name = \"\";\n  var _iterator = _createForOfIteratorHelper(input),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var c = _step.value;\n      name += (0, _helperValidatorIdentifier.isIdentifierChar)(c.codePointAt(0)) ? c : \"-\";\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  name = name.replace(/^[-0-9]+/, \"\");\n  name = name.replace(/[-\\s]+(.)?/g, function (match, c) {\n    return c ? c.toUpperCase() : \"\";\n  });\n  if (!(0, _isValidIdentifier.default)(name)) {\n    name = \"_\".concat(name);\n  }\n  return name || \"_\";\n}","map":{"version":3,"names":["_isValidIdentifier","require","_helperValidatorIdentifier","toIdentifier","input","name","_iterator","_createForOfIteratorHelper","_step","s","n","done","c","value","isIdentifierChar","codePointAt","err","e","f","replace","match","toUpperCase","default","concat"],"sources":["C:\\Users\\pongster\\Documents\\ezpcbutworkingthistime\\FRONTEND\\node_modules\\@babel\\types\\src\\converters\\toIdentifier.ts"],"sourcesContent":["import isValidIdentifier from \"../validators/isValidIdentifier\";\nimport { isIdentifierChar } from \"@babel/helper-validator-identifier\";\n\nexport default function toIdentifier(input: string): string {\n  input = input + \"\";\n\n  // replace all non-valid identifiers with dashes\n  let name = \"\";\n  for (const c of input) {\n    name += isIdentifierChar(c.codePointAt(0)) ? c : \"-\";\n  }\n\n  // remove all dashes and numbers from start of name\n  name = name.replace(/^[-0-9]+/, \"\");\n\n  // camel case\n  name = name.replace(/[-\\s]+(.)?/g, function (match, c) {\n    return c ? c.toUpperCase() : \"\";\n  });\n\n  if (!isValidIdentifier(name)) {\n    name = `_${name}`;\n  }\n\n  return name || \"_\";\n}\n"],"mappings":";;;;;;;AAAA,IAAAA,kBAAA,GAAAC,OAAA;AACA,IAAAC,0BAAA,GAAAD,OAAA;AAEe,SAASE,YAAYA,CAACC,KAAa,EAAU;EAC1DA,KAAK,GAAGA,KAAK,GAAG,EAAE;EAGlB,IAAIC,IAAI,GAAG,EAAE;EAAA,IAAAC,SAAA,GAAAC,0BAAA,CACGH,KAAK;IAAAI,KAAA;EAAA;IAArB,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAuB;MAAA,IAAZC,CAAC,GAAAJ,KAAA,CAAAK,KAAA;MACVR,IAAI,IAAI,IAAAH,0BAAA,CAAAY,gBAAgB,EAACF,CAAC,CAACG,WAAW,CAAC,CAAC,CAAC,CAAC,GAAGH,CAAC,GAAG,GAAG;IACtD;EAAA,SAAAI,GAAA;IAAAV,SAAA,CAAAW,CAAA,CAAAD,GAAA;EAAA;IAAAV,SAAA,CAAAY,CAAA;EAAA;EAGAb,IAAI,GAAGA,IAAI,CAACc,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;EAGnCd,IAAI,GAAGA,IAAI,CAACc,OAAO,CAAC,aAAa,EAAE,UAAUC,KAAK,EAAER,CAAC,EAAE;IACrD,OAAOA,CAAC,GAAGA,CAAC,CAACS,WAAW,CAAC,CAAC,GAAG,EAAE;EACjC,CAAC,CAAC;EAEF,IAAI,CAAC,IAAArB,kBAAA,CAAAsB,OAAiB,EAACjB,IAAI,CAAC,EAAE;IAC5BA,IAAI,OAAAkB,MAAA,CAAOlB,IAAK,CAAC;EACnB;EAEA,OAAOA,IAAI,IAAI,GAAG;AACpB"},"metadata":{},"sourceType":"script","externalDependencies":[]}